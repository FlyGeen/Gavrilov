import java.util.Arrays;
import java.util.Random;

public class SortComparison {
    
    // Пузырьковая сортировка
    public static void bubbleSort(int[] array) {
        int n = array.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (array[j] > array[j + 1]) {
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
    }

    // Сортировка слиянием
    public static void mergeSort(int[] array) {
        if (array.length > 1) {
            int mid = array.length / 2;

            // Создание подмассивов
            int[] left = Arrays.copyOfRange(array, 0, mid);
            int[] right = Arrays.copyOfRange(array, mid, array.length);

            // Рекурсивная сортировка подмассивов
            mergeSort(left);
            mergeSort(right);

            // Слияние отсортированных подмассивов
            merge(array, left, right);
        }
    }

    private static void merge(int[] result, int[] left, int[] right) {
        int i = 0, j = 0, k = 0;
        while (i < left.length && j < right.length) {
            if (left[i] <= right[j]) {
                result[k++] = left[i++];
            } else {
                result[k++] = right[j++];
            }
        }
        while (i < left.length) {
            result[k++] = left[i++];
        }
        while (j < right.length) {
            result[k++] = right[j++];
        }
    }

    // Метод для генерации массива случайных чисел
    public static int[] generateRandomArray(int size) {
        Random random = new Random();
        int[] array = new int[size];
        for (int i = 0; i < size; i++) {
            array[i] = random.nextInt(10000); // значения от 0 до 9999
        }
        return array;
    }

    // Метод для измерения времени выполнения сортировки
    public static long measureTime(Runnable sortMethod) {
        long startTime = System.nanoTime();
        sortMethod.run();
        long endTime = System.nanoTime();
        return endTime - startTime;
    }

    public static void main(String[] args) {
        int[] smallArray = generateRandomArray(100);
        int[] largeArray = generateRandomArray(10000);

        // Пузырьковая сортировка
        int[] smallArrayForBubbleSort = Arrays.copyOf(smallArray, smallArray.length);
        int[] largeArrayForBubbleSort = Arrays.copyOf(largeArray, largeArray.length);

        long bubbleSortTimeSmall = measureTime(() -> bubbleSort(smallArrayForBubbleSort));
        long bubbleSortTimeLarge = measureTime(() -> bubbleSort(largeArrayForBubbleSort));

        System.out.println("Bubble Sort Time (Small Array): " + bubbleSortTimeSmall + " ns");
        System.out.println("Bubble Sort Time (Large Array): " + bubbleSortTimeLarge + " ns");

        // Сортировка слиянием
        int[] smallArrayForMergeSort = Arrays.copyOf(smallArray, smallArray.length);
        int[] largeArrayForMergeSort = Arrays.copyOf(largeArray, largeArray.length);

        long mergeSortTimeSmall = measureTime(() -> mergeSort(smallArrayForMergeSort));
        long mergeSortTimeLarge = measureTime(() -> mergeSort(largeArrayForMergeSort));

        System.out.println("Merge Sort Time (Small Array): " + mergeSortTimeSmall + " ns");
        System.out.println("Merge Sort Time (Large Array): " + mergeSortTimeLarge + " ns");
    }
}
